# The issuer url to be used. MUST point to this server
issuer: "https://mytoken.example.com"

# Details about the service operator. Will be displayed in the privacy page.
service_operator:
  # The name of the service operator
  name: "Example Foundation"
  homepage: "https://example.com"
  # An email address where users can contact the service operator. It is recommended to use an email list for this
  mail_contact: "mytoken@example.com"
  # A dedicated email address for privacy related topics can be given.
  # If you do not have a dedicated mail for privacy, it can be omitted.
  mail_privacy: "mytoken-privacy@example.com"

# Configuration for the mytoken server
server:
  # If TLS is not enabled, mytoken will listen on this port, default: 8000
  port: 8000
  tls:
    # Unless false TLS is enabled if 'cert' and 'key' are given
    enabled: true
    # Unless false port 80 is redirected to 443
    redirect_http: true
    # The TLS certificate file
    cert:
    # The TLS certificate key file
    key:
  # If behind a load balancer or reverse proxy and TLS is set on that and not on the mytoken server set this option
  # to 'true'
  ##secure: true
  # If behind a load balancer or reverse proxy, set this option.
  # Mytoken will read the client's ip address from this header.
  ##proxy_header: "X-FORWARDED-FOR"
  # If you run the mytoken server in a distributed setup with multiple instances set this option to 'true'
  distributed_servers: false
  # Configure the request limits (these are per IP)
  request_limits:
    # Unless false request limits are enabled
    enabled: true
    # The number of requests that are allowed within the specified time window, e.g. 10/1s 100/5min 1000/1h
    max_requests: 100
    # The time window in which the maximum number of requests is allowed, i.e. the quota is reset after this time.
    # The time is given in seconds.
    window: 300
    # Use the list to exclude hosts from the request limit. You can specify single IP addresses, subnets and
    # hostnames including wildcards.
    always_allow:
      - "127.0.0.1"

# The database file for ip geolocation. Will be installed by setup to this location.
geo_ip_db_file: "/IP2LOCATION-LITE-DB1.IPV6.BIN"

# Configuration of the mytoken API
api:
  # Mytoken can support multiple api versions at the same time; this is the minimal version that is supported;
  # older versions won't be supported. Currently only 0 is supported.
  min_supported_version: 0

# Configuration for the database
database:
  hosts:
    - "localhost"
  user: "mytoken"
  password: "mytoken"
  # Read the db password from this file
  password_file:
  db: "mytoken"
  # The interval (in seconds) in which mytoken tries to reconnect to db nodes that are down
  try_reconnect_interval: 60
  # Enable / Disable cleanup of expired db entries once a day
  # schedule_cleanup: true

# Configuration related to caching
cache:
  # Configures the internal in-memory cache
  internal:
    # The default time-to-live of the cache, i.e. how long values are cached if the server does not set another ttl
    default_ttl: 300
    # In which interval the cache is cleaned-up
    cleanup_interval: 600
  # Configuration for an external cache, such as redis (currently the only supported one)
  # If configured the internal cache is not used.
  external:
    # Redis configuration
    redis:
#      addr: "localhost:6379"
#      username:
#      password:
#      db:

# Configuration for token signing
signing:
  # Configuration for mytoken signing
  mytoken:
    # The used algorithm
    alg: "ES512"
    # The file with the signing key
    key_file: "/mytoken.key"
    # If an RSA-based algorithm is used, this is the key len. Only needed when generating a new rsa key.
    rsa_key_len: 2048
  # Configuration for signing operations within oidc communication, currently this is only used if federation support
  #  is enabled; it is recommended to use different signing keys for mytoken signing, oidc communication, and federation
  oidc:
    # The used algorithm
    alg: "ES512"
    # The file with the signing key
    # key_file: "/oidc.key"
    # If an RSA-based algorithm is used, this is the key len. Only needed when generating a new rsa key.
    rsa_key_len: 2048

# Configuration for logging
logging:
  # The web server access logs
  access:
    # The directory where the log file should be placed
    dir: "/var/log/mytoken"
    # Indicates if mytoken should log additionally to stderr
    stderr: false
  # The mytoken internal logs
  internal:
    # The directory where the log file should be placed
    dir: "/var/log/mytoken"
    # Indicates if mytoken should log additionally to stderr
    stderr: false
    # The minimal log level that should be logged
    level: "error"
    # Configuration for 'smart' logging. If enabled internal logging is usually logged from the minimal log level as
    # usual, but if an error occurs a special error log is logged to a dedicated file that contains all log entries
    # (with all log levels, also levels that normally wouldn't be logged) for that particular request.
    smart:
      # Unless false smart logging is enabled
      enabled: true
      # The directory where the error log files are stored. If omitted it is equal to the normal internal logging dir
      dir: "/var/log/mytoken/errors"

# URL with documentation about the service
service_documentation: "https://mytoken-docs.data.kit.edu/"

# Configuration and enabling/disabling for different features
features:
  # The supported oidc flows
  oidc_flows:
    # Configurations for the authorization code flow, which is always enabled
    authorization_code:
      # Configurations related to client_type=web
      web:
        # A list of trusted redirect uris. If the client type is web and redirect_uri matches on of the following regexes the
        # consent screen will be skipped. Do this only for applications with well-known redirect-uris and high trust. But it
        # makes sense to add your own web interface.
        trusted_redirect_uris:
        #- "^(https:\\/\\/mytoken\\.example\\.com)?\\/"
        # The time in seconds how long a mytoken cookie is valid, default is one week.
        cookie_lifetime: 604800

  # Specify restriction keys to disable support for them; on default all restriction keys are supported.
  unsupported_restrictions:
  #    - nbf
  #    - exp
  #    - scope
  #    - audience
  #    - hosts
  #    - geoip_allow
  #    - geoip_disallow
  #    - usages_AT
  #    - usages_other

  # Revocation for tokens issued by mytoken. Only disable this if you have good reasons for it.
  token_revocation:
    enabled: true

  # Endpoint to obtain different information about mytokens issued by this instance.
  tokeninfo:
    # Basic mytoken introspection (token-content useful when using short mytokens). Also gives information about
    # validity and how often the token was used before.
    # Must be enabled for usage with the web interface.
    introspect:
      enabled: true
    # If enabled allows to query the tokeninfo endpoint to obtain the history of events for a given mytoken
    event_history:
      enabled: true
    # If enabled allows to query the tokeninfo endpoint for a list (tree) of all subtokens for a given mytoken
    subtoken_tree:
      enabled: true
    # If enabled allows a user to query the tokeninfo endpoint for a list of all its mytokens (the mytoken itself won't
    # be returned)
    list_mytokens:
      enabled: true

  # Support for short mytokens
  short_tokens:
    enabled: true
    len: 64 # Default 64, min 32

  # Support for transfer codes for mytokens; transfer codes have the same len as polling codes and expire after the same
  # time
  transfer_codes:
    enabled: true

  # Support for polling codes that are used by native applications. Only disable this if you have good reasons for it.
  polling_codes:
    enabled: true
    len: 8 # Default 8, max 30, MUST be different from short_tokens len
    expires_after: 300 # The time in seconds how long a polling code can be used
    polling_interval: 5 # The interval in seconds the native application should wait between two polling attempts

  # Support for rotation mytokens; users can enable rotation/disable rotation for their mytokens;
  # if enabled, a new mytoken will be returned after each usage and old mytokens can no longer be used.
  token_rotation:
    enabled: true

  # Provides a web interface for in browser usage
  web_interface:
    enabled: true
    # A director with the same structure as https://github.com/oidc-mytoken/server/tree/master/internal/server/web
    # where web files can be located. If this option is set and a file is present here it is used to overwrite the
    # default file. This can be used for customization, especially css.
    # overwrite_dir: "/var/www/mytoken"

  ssh:
    enabled: true
    # If true the haproxy proxy protocl (https://www.haproxy.org/download/2.3/doc/proxy-protocol.txt) is used to
    # receive client information, i.e. the client's ip from the proxy; the proxy must support this
    use_proxy_protocol: false
    # The ssh private key files of the server
    keys:
      - /etc/ssh/ssh_host_ecdsa_key
      - /etc/ssh/ssh_host_ed25519_key
      - /etc/ssh/ssh_host_rsa_key

  # Settings related to server profiles and templates
  server_profiles:
    enabled: true
    # group names and passwords; those are used by an entity to add, update, delete profiles on this server, the '_'
    # group is the default group managed by the server admin
    groups:
    # _: admin

  # If true a guest mode is enabled that allows to obtain mytokens without further auth, ATs are obviously dummy
  guest_mode: false

  # Settings related to the notifications feature
  notifications:
    # If a standalone notifier server is used (required in a distributed setup), specify the base url here
    notifier_server_url:
    # Enables calendar support
    ics:
      enabled: true
    # Email notifications
    email:
      enabled: true
      # Settings for the used mailserver, only used if the integrated notifier is used
      mail_server:
        host:
        port: 25
        user:
        password:
        from_address:
    # Not yet implemented
    ws:
      enabled: true

  # Configuration for usage of OpenID Federations
  federation:
    enabled: false
    trust_anchors:
    authority_hints:
    entity_configuration_lifetime: 604800
    # Configuration for signing federation statements
    signing:
      # The used algorithm
      alg: "ES512"
      # The file with the signing key
      key_file: "/federation.ecdsa.key"
      # If an RSA-based algorithm is used, this is the key len. Only needed when generating a new rsa key.
      rsa_key_len: 2048

# The list of supported providers
providers:
  - issuer: "https://example.provider.com/"
    name: "Example provider"
    client_id: "clientid"
    client_secret: "clientsecret"
    scopes:
      - openid
      - profile
    # Maximum lifetime for mytokens for this issuer, given in seconds. On default the lifetime of mytokens is not
    # restricted. Setting this value to 0, means that there is no maximum lifetime.
    mytokens_max_lifetime: 0
    # Settings related to how the audience(s) of ATs is requested
    audience:
      # Unless false audiences are requested according to RFC8707; other options are ignored;
      use_rfc8707: true
      # The parameter used in the request, common options are "resource" and "audience"
      request_parameter: "resource"
      # Defines how multiple audience values in a request are handled;
      space_separate_auds: false
    # Settings related to restrictions that should be enforced for different user groups depending on an OP attribute
    enforced_restrictions:
      # A mapping for claim sources: Mapping between an url and claim name; defines how the claim value is obtained
      # on which the decision which restriction template is enforced is based on
      # The key should be an url, that behaves in line with an OP's userinfo endpoint
      # The special keys 'issuer', 'op', 'default', and 'userinfo' can be used;
      # if one of these keys is used, the claim name is looked up in the
      # id token, access token, and userinfo endpoint
      claim_sources:
      #issuer: "eduperson_entitlements"
      # If true, indicates that access should be completely forbidden if no value from 'mapping' matches
      #forbid_on_default: false
      # The default restriction template that will be enforced for all users where no value from 'mapping' matches;
      # only used if 'forbid_on_default=false'; the restriction template must be configured on the server or be
      # provided as json (but as a string)
      # The help_html content is displayed if forbid_on_default=true and a user tries to log in and does not have
      # access. The html should contain information about why the user does not have access and what to do in order
      # to get access. The html can also be given in the help_html_file. This should only be a html snippet, no
      # complete html page.
      #help_html:
      #help_html_file:
      #default_template: web-default
      # A mapping between claim values and the enforced restriction template; the templates must be configured on the
      # server or be provided as json (but as a string); an entry matches if the attribute is a string array and the
      # mapping key is included in the array or the attribute is a single value and equals the mapping key;
      # the mapping MUST be given in order such that the highest privileged template is listed first
      mapping:
      #admin: ""
      #urn:geant:mytoken:advanced: "advanced"
      #urn:geant:mytoken:medium: "medium"

