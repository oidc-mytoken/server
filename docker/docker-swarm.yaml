version: "3.8"
services:
  mytoken:
    image: oidcmytoken/mytoken-server
    sysctls:
      - net.ipv4.ip_unprivileged_port_start=0
    configs:
      - source: mytoken_config
        target: /etc/mytoken/config.yaml
    volumes:
      - ${MYTOKEN_CERTCHAIN}:/mytoken/certchain.pem:ro
      - ${MYTOKEN_GEOIPDB}:/mytoken/IP2LOCATION-LITE-DB1.IPV6.BIN:ro
      - ${MYTOKEN_LOGS_DIR}:/mytoken/logs
    secrets:
      - mytoken_signing_key
      - ssh_host_ecdsa_key
      - ssh_host_ed25519_key
      - ssh_host_rsa_key
      - db_password
      - cert
    networks:
      - frontend
      - backend
    ports:
      - target: 80
        published: 80
        mode: host
      - target: 443
        published: 443
        mode: host
      - target: 2222
        published: 2222
        mode: host
    #    environment:
    #      - WAIT_FOR_NODES=db:3306
    deploy:
      mode: replicated
      #      replicas: 3
      placement:
        max_replicas_per_node: 1
      restart_policy:
        condition: any
        delay: 10s
        window: 60s
      rollback_config:
        parallelism: 1
        delay: 15s
      update_config:
        parallelism: 1
        delay: 30s
        monitor: 15s
        failure_action: rollback
          #healthcheck:
          #test: ["CMD","curl", "-f", "https://localhost/.well-known/mytoken-configuration"]
          #timeout: 5s
          #retries: 3
        #start_period: 30s

  db-bootstrap:
    image: bitnami/mariadb-galera:latest
    volumes:
      - ${DB_BOOTSTRAP_DIR}:/bitnami/mariadb
    networks:
      - backend
    env_file:
      - db.env
    environment:
      - MARIADB_GALERA_CLUSTER_BOOTSTRAP=yes
      - MARIADB_GALERA_CLUSTER_ADDRESS=gcomm://
      - MARIADB_PASSWORD_FILE=/run/secrets/db_password
      - MARIADB_ROOT_PASSWORD_FILE=/run/secrets/db_root_password
      - MARIADB_GALERA_MARIABACKUP_PASSWORD_FILE=/run/secrets/db_backup_password
      - MARIADB_REPLICATION_PASSWORD_FILE=/run/secrets/db_replication_password
    secrets:
      - db_password
      - db_root_password
      - db_backup_password
      - db_replication_password
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: none
      update_config:
        parallelism: 0
    healthcheck:
      test: [ 'CMD', '/opt/bitnami/scripts/mariadb-galera/healthcheck.sh' ]
      interval: 15s
      timeout: 5s
      retries: 6

  db:
    image: oidcmytoken/galera-node:latest
    volumes:
      - ${DB_DATA_DIR}:/bitnami/mariadb
    networks:
      - backend
    env_file:
      - db.env
    environment:
      - MARIADB_GALERA_CLUSTER_ADDRESS=gcomm://db-bootstrap,db
      - MARIADB_PASSWORD_FILE=/run/secrets/db_password
      - MARIADB_ROOT_PASSWORD_FILE=/run/secrets/db_root_password
      - MARIADB_GALERA_MARIABACKUP_PASSWORD_FILE=/run/secrets/db_backup_password
      - MARIADB_REPLICATION_PASSWORD_FILE=/run/secrets/db_replication_password
      - WAIT_FOR_NODES=db-bootstrap:3306,db:3306
    secrets:
      - db_password
      - db_root_password
      - db_backup_password
      - db_replication_password
    deploy:
      mode: replicated
      #      replicas: 3
      placement:
        max_replicas_per_node: 1
      restart_policy:
        condition: on-failure
      rollback_config:
        parallelism: 1
        delay: 120s
      update_config:
        parallelism: 1
        delay: 180s
        failure_action: rollback
    healthcheck:
      test: [ 'CMD', '/opt/bitnami/scripts/mariadb-galera/healthcheck.sh' ]
      interval: 15s
      timeout: 5s
      retries: 6
    command: ["/opt/bitnami/scripts/mariadb-galera/entrypoint.sh", "/opt/bitnami/scripts/mariadb-galera/run.sh"]

  migrate:
    image: oidcmytoken/mytoken-migratedb
    networks:
      - backend
    environment:
      - DB_PASSWORD_FILE=/run/secrets/db_root_password
      - DB_DATABASE=mytoken
      - DB_NODES=db
      - WAIT_FOR_NODES=db:3306
      - MYTOKEN_NODES=mytoken
    secrets:
      - db_root_password
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure

#  debug:
#    deploy:
#      mode: replicated
#      replicas: 1
#      restart_policy:
#        condition: on-failure
#    image: debian:stable
#    networks:
#      backend: null
#      frontend: null
#    entrypoint: /bin/bash
#    stdin_open: true # docker run -i
#    tty: true        # docker run -t


networks:
  frontend:
  backend:

configs:
  mytoken_config:
    file: ${MYTOKEN_CONFIG_FILE}

secrets:
  cert:
    file: ${SECRET_CERT}
  mytoken_signing_key:
    file: ${SECRET_MYTOKEN_SIGNING_KEY}
  db_password:
    file: ${SECRET_DB_PASSWORD_FILE}
  db_root_password:
    file: ${SECRET_DB_ROOT_PASSWORD_FILE}
  db_backup_password:
    file: ${SECRET_DB_BACKUP_PASSWORD_FILE}
  db_replication_password:
    file: ${SECRET_DB_REPLICATION_PASSWORD_FILE}
  ssh_host_ecdsa_key:
    file: ${SECRET_SSH_HOST_ECDSA_KEY}
  ssh_host_ed25519_key:
    file: ${SECRET_SSH_HOST_ED25519_KEY}
  ssh_host_rsa_key:
    file: ${SECRET_SSH_HOST_RSA_KEY}
